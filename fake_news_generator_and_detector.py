# -*- coding: utf-8 -*-
"""Fake-news-generator-and-detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IJfHh1VMAos0Kut66PLAAIZrIsz5Ayg0

# Fake News Generator and Detector

## Introduction
This project demonstrates a dual-purpose Natural Language Processing (NLP) application that uses transformer-based models to tackle the challenge of misinformation. The system consists of two main components: a **Fake News Generator**, which utilizes GPT-2 to produce realistic-looking news articles based on a user-provided prompt, and a **Fake News Detector**, which employs BERT to classify given news content as either fake or real. By combining generative and discriminative models, this project offers a hands-on exploration of language model capabilities and the implications of AI-generated content.

## Objective
The main objective is to build a user-friendly application capable of generating synthetic news text and detecting the authenticity of a given article or statement. This project highlights both the creative power of transformer models and their utility in identifying misinformation.

## Tools and Technologies
- **Python**
- **PyTorch**
- **Hugging Face Transformers (GPT-2 & BERT)**
- **Gradio** for the web interface

## Project Flow
1. Load and configure pre-trained models from Hugging Face.
2. Use GPT-2 to generate news content based on a prompt.
3. Use BERT for binary classification of input news as fake or real.
4. Build a simple interactive UI using Gradio to access both functionalities.

---
"""

!pip install -q transformers torch gradio

# ‚úÖ Imports
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import gradio as gr

# ‚úÖ Check device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ‚úÖ Load Models
gpt2_tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
gpt2_model = GPT2LMHeadModel.from_pretrained("gpt2").to(device)

bert_tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
bert_model = AutoModelForSequenceClassification.from_pretrained(
    "bert-base-uncased", num_labels=2
).to(device)

# ‚úÖ Generate Fake News
def generate_fake_news(prompt):
    inputs = gpt2_tokenizer.encode(prompt, return_tensors="pt").to(device)
    outputs = gpt2_model.generate(
        inputs,
        max_length=200,
        num_return_sequences=1,
        no_repeat_ngram_size=2,
        do_sample=True,
        temperature=0.7,
        top_k=50,
        top_p=0.95,
        early_stopping=True
    )
    generated_text = gpt2_tokenizer.decode(outputs[0], skip_special_tokens=True)
    return generated_text

# ‚úÖ Detect Fake or Real News
def detect_news(text):
    inputs = bert_tokenizer(text, return_tensors="pt", truncation=True, padding=True).to(device)
    with torch.no_grad():
        outputs = bert_model(**inputs)
    logits = outputs.logits
    predicted_class = torch.argmax(logits, dim=1).item()
    confidence = torch.softmax(logits, dim=1)[0][predicted_class].item()
    label = "üü• Fake News" if predicted_class == 0 else "üü© Real News"
    return f"{label} (Confidence: {confidence:.2f})"

# ‚úÖ Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## üì∞ Fake News Generator & Detector (GPT-2 + BERT)")
    with gr.Tab("üõ†Ô∏è Generate Fake News"):
        with gr.Row():
            input_text = gr.Textbox(label="Enter a News Headline or Prompt", placeholder="e.g. A mysterious object was spotted in the sky...", lines=2)
        generate_btn = gr.Button("Generate")
        output_text = gr.Textbox(label="Generated News Article")
        generate_btn.click(generate_fake_news, inputs=input_text, outputs=output_text)

    with gr.Tab("üîç Detect Fake or Real"):
        with gr.Row():
            detect_input = gr.Textbox(label="Enter a News Article or Statement", placeholder="Paste a paragraph to detect if it's fake or real...", lines=5)
        detect_btn = gr.Button("Detect")
        detect_output = gr.Textbox(label="Detection Result")
        detect_btn.click(detect_news, inputs=detect_input, outputs=detect_output)

# ‚úÖ Launch
demo.launch()

